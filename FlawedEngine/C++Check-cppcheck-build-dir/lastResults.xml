<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.10"/>
    <errors>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/Input/Input.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Input\Input.cpp" line="30"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetKeyPressed&amp;#039; is never used." verbose="The function &amp;#039;GetKeyPressed&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Input\Input.cpp" line="38"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Poll&amp;#039; is never used." verbose="The function &amp;#039;Poll&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Input\Input.cpp" line="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="12"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;Mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;Mode&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="33"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Compute&amp;#039; is never used." verbose="The function &amp;#039;Compute&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="22"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;FoV&amp;#039; is never used." verbose="The function &amp;#039;FoV&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="125"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Front&amp;#039; is never used." verbose="The function &amp;#039;Front&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="124"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Postion&amp;#039; is never used." verbose="The function &amp;#039;Postion&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="123"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Projection&amp;#039; is never used." verbose="The function &amp;#039;Projection&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="121"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UpdateProjection&amp;#039; is never used." verbose="The function &amp;#039;UpdateProjection&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="126"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;View&amp;#039; is never used." verbose="The function &amp;#039;View&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.cpp" line="122"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;cpCamera&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;cpCamera&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\PerspectiveCamera.h" line="13"/>
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398" file0="FlawedEngine/Core/Shader.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Shader.cpp" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vertexInfoLog&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vertexInfoLog&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Core/Shader.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Shader.cpp" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fragmentInfoLog&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fragmentInfoLog&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Core/Shader.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Shader.cpp" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;programInfoLog&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;programInfoLog&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Core/Shader.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Shader.cpp" line="51"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="FlawedEngine/Core/Engine.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\Bullet\BulletCollision\CollisionShapes\btTriangleIndexVertexArray.h" line="25"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18020"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1180"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2729"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3463"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;n==-1&amp;#039; is always false" verbose="Condition &amp;#039;n==-1&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10813"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;n!=-1&amp;#039; is always true" verbose="Condition &amp;#039;n!=-1&amp;#039; is always true" cwe="571" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10814"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;n==-1&amp;#039; is always false" verbose="Condition &amp;#039;n==-1&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10835"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;n!=-1&amp;#039; is always true" verbose="Condition &amp;#039;n!=-1&amp;#039; is always true" cwe="571" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10836"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;window!=ignore_window&amp;#039; is redundant or there is possible null pointer dereference: window." verbose="Either the condition &amp;#039;window!=ignore_window&amp;#039; is redundant or there is possible null pointer dereference: window." cwe="476" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7698" info="Null pointer dereference"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7699" info="Assuming that condition &amp;#039;window!=ignore_window&amp;#039; is not redundant"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10591" info="Calling function &amp;#039;FocusTopMostWindowUnderOne&amp;#039;, 2nd argument &amp;#039;NULL&amp;#039; value is 0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;prev_nav_window&amp;#039; is redundant or there is possible null pointer dereference: window." verbose="Either the condition &amp;#039;prev_nav_window&amp;#039; is redundant or there is possible null pointer dereference: window." cwe="476" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11366" info="Null pointer dereference"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11380" info="Calling function &amp;#039;NavRestoreLastChildNavWindow&amp;#039;, 1st argument &amp;#039;g.NavWindow&amp;#039; value is 0"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11379" info="prev_nav_window is assigned &amp;#039;g.NavWindow&amp;#039; here."/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11381" info="Assuming that condition &amp;#039;prev_nav_window&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1704"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1714"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1718"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1723"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1738"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1898"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1915"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2003"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2026"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2313"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2314"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2601"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2722"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2766"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2788"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2799"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3023"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3073"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3087"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3110"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3523"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="4054"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="4065"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6404"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13079"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13132"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13211"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13627"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13705"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13784"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13808"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13818"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14058"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14506"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14547"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14605"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14616"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15793"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15895"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15896"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17323"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17835"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17841"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18060"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18775"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18847"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19010"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19056"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19058"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19142"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19290"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19390"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19746"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6051"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13052"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="16863"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mouse_button_names&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mouse_button_names&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19667"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2617"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2920"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;backup&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;backup&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3011"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3386"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3430"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3501"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3511"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3643"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3675"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3861"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="4326"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="5196"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="5284"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="5672"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;style&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;style&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6051"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6341"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6350"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6635"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;popup_ref&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;popup_ref&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6692"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7681"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7885"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8403"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8584"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8668"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9000"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9219"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9890"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9950"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10142"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10390"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10430"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10440"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;popup&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;popup&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10527"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10561"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10878"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10899"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11283"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12031"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12047"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12112"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12381"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12637"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12875"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13384"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13396"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13434"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13461"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13479"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14160"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14175"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14522"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14645"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14802"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15020"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15032"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15048"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15429"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15905"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15962"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="16286"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;style&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;style&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="16315"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="16697"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17527"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17619"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17629"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;ignore_window&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;ignore_window&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7679"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;potential_parent&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;potential_parent&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7854"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;potential_parent&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;potential_parent&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7870"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;window&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;window&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11342"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;node&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;node&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="14861"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;node_ids&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;node_ids&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17933"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;parent_in_begin_stack&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;parent_in_begin_stack&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19503"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((float*)data)[0]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((float*)data)[0]&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3109"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((float*)data)[1]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((float*)data)[1]&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3110"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;line&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;line&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18020"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="18995"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="19360"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." cwe="664" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2570"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." cwe="664" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2575"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ActivateItem&amp;#039; is never used." verbose="The function &amp;#039;ActivateItem&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8269"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddContextHook&amp;#039; is never used." verbose="The function &amp;#039;AddContextHook&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3969"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddInputCharacterUTF16&amp;#039; is never used." verbose="The function &amp;#039;AddInputCharacterUTF16&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1275"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddInputCharactersUTF8&amp;#039; is never used." verbose="The function &amp;#039;AddInputCharactersUTF8&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1309"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;BringWindowToDisplayBack&amp;#039; is never used." verbose="The function &amp;#039;BringWindowToDisplayBack&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="7588"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;BuildSortByKey&amp;#039; is never used." verbose="The function &amp;#039;BuildSortByKey&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2306"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CalcListClipping&amp;#039; is never used." verbose="The function &amp;#039;CalcListClipping&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2625"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ClearInputCharacters&amp;#039; is never used." verbose="The function &amp;#039;ClearInputCharacters&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1323"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ClosePopupsExceptModals&amp;#039; is never used." verbose="The function &amp;#039;ClosePopupsExceptModals&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10559"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderAddNode&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderAddNode&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17267"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderCopyDockSpace&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderCopyDockSpace&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17525"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderFinish&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderFinish&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17600"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderSetNodePos&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderSetNodePos&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17239"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderSetNodeSize&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderSetNodeSize&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17249"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockBuilderSplitNode&amp;#039; is never used." verbose="The function &amp;#039;DockBuilderSplitNode&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="17415"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockContextCalcDropPosForDocking&amp;#039; is never used." verbose="The function &amp;#039;DockContextCalcDropPosForDocking&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15089"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockNodeBeginAmendTabBar&amp;#039; is never used." verbose="The function &amp;#039;DockNodeBeginAmendTabBar&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15938"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DockNodeEndAmendTabBar&amp;#039; is never used." verbose="The function &amp;#039;DockNodeEndAmendTabBar&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="15952"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ErrorCheckEndFrameRecover&amp;#039; is never used." verbose="The function &amp;#039;ErrorCheckEndFrameRecover&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9436"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ForceDisplayRangeByIndices&amp;#039; is never used." verbose="The function &amp;#039;ForceDisplayRangeByIndices&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2786"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetBool&amp;#039; is never used." verbose="The function &amp;#039;GetBool&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2329"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetBoolRef&amp;#039; is never used." verbose="The function &amp;#039;GetBoolRef&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2359"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetFloat&amp;#039; is never used." verbose="The function &amp;#039;GetFloat&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2334"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetFloatRef&amp;#039; is never used." verbose="The function &amp;#039;GetFloatRef&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2364"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetHoveredID&amp;#039; is never used." verbose="The function &amp;#039;GetHoveredID&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3641"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetKeyIndex&amp;#039; is never used." verbose="The function &amp;#039;GetKeyIndex&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8495"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetKeyOwner&amp;#039; is never used." verbose="The function &amp;#039;GetKeyOwner&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="9144"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetVoidPtrRef&amp;#039; is never used." verbose="The function &amp;#039;GetVoidPtrRef&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2372"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetWindowResizeBorderID&amp;#039; is never used." verbose="The function &amp;#039;GetWindowResizeBorderID&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6177"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetWindowResizeCornerID&amp;#039; is never used." verbose="The function &amp;#039;GetWindowResizeCornerID&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="6167"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImBezierCubicClosestPoint&amp;#039; is never used." verbose="The function &amp;#039;ImBezierCubicClosestPoint&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1556"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImBezierCubicClosestPointCasteljau&amp;#039; is never used." verbose="The function &amp;#039;ImBezierCubicClosestPointCasteljau&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1614"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImStricmp&amp;#039; is never used." verbose="The function &amp;#039;ImStricmp&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1677"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImStrlenW&amp;#039; is never used." verbose="The function &amp;#039;ImStrlenW&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1727"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImStrnicmp&amp;#039; is never used." verbose="The function &amp;#039;ImStrnicmp&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1684"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsDragDropActive&amp;#039; is never used." verbose="The function &amp;#039;IsDragDropActive&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12379"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsItemToggledSelection&amp;#039; is never used." verbose="The function &amp;#039;IsItemToggledSelection&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="5670"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;LogToBuffer&amp;#039; is never used." verbose="The function &amp;#039;LogToBuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12873"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RemoveContextHook&amp;#039; is never used." verbose="The function &amp;#039;RemoveContextHook&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="3979"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RemoveSettingsHandler&amp;#039; is never used." verbose="The function &amp;#039;RemoveSettingsHandler&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="13050"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RenderDragDropTargetRect&amp;#039; is never used." verbose="The function &amp;#039;RenderDragDropTargetRect&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="12678"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ScrollToItem&amp;#039; is never used." verbose="The function &amp;#039;ScrollToItem&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="10127"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetAllInt&amp;#039; is never used." verbose="The function &amp;#039;SetAllInt&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="2419"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetAppAcceptingEvents&amp;#039; is never used." verbose="The function &amp;#039;SetAppAcceptingEvents&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="1444"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;TestShortcutRouting&amp;#039; is never used." verbose="The function &amp;#039;TestShortcutRouting&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="8745"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: window" verbose="Null pointer dereference: window" cwe="476" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11366" info="Dereferencing argument window that is null"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.cpp" line="11380" info="Calling function NavRestoreLastChildNavWindow, 1st argument is null"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2429"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2518"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2635"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="3066"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="3202"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;GlyphOffset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;GlyphOffset&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2828"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;WorkSize&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;WorkSize&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="3192"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiTextFilter&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiTextFilter&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2293"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiListClipper&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiListClipper&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2429"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2465"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2467"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImDrawList&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImDrawList&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="2635"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="1882"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/PerspectiveCamera.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui.h" line="1883"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is redundant or strchr() argument nr 2 can have invalid value. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Either the condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is redundant or strchr() argument nr 2 can have invalid value. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1434" info="Invalid argument"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1434" info="Assuming that condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;Color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;Color&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="8010"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MyDocument&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MyDocument&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="8004"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;picker_mode==1&amp;#039; is always false" verbose="Condition &amp;#039;picker_mode==1&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1937"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;picker_mode==2&amp;#039; is always false" verbose="Condition &amp;#039;picker_mode==2&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1938"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="850"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="897"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="918"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1187"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1493"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1531"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1544"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1555"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="2309"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="3067"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="3114"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="3708"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="3709"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="5724"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="5732"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="6212"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="6687"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="6832"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="6895"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="7419"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="7421"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;progress_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;progress_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="1770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;test_desc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;test_desc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="7424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opt_fitting_flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opt_fitting_flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="8097"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;style&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;style&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="2841"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_demo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_demo.cpp" line="7942"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &amp;#039;Offsets[0]&amp;#039; accessed at index -2147483648, which is out of bounds." verbose="Array &amp;#039;Offsets[0]&amp;#039; accessed at index -2147483648, which is out of bounds." cwe="786" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Negative array index"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Safe checks: Assuming argument has value -2147483648"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &amp;#039;Sizes[0]&amp;#039; accessed at index -2147483648, which is out of bounds." verbose="Array &amp;#039;Sizes[0]&amp;#039; accessed at index -2147483648, which is out of bounds." cwe="786" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Negative array index"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Safe checks: Assuming argument has value -2147483648"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1012"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1068"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1141"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1160"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1294"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1412"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1524"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1545"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1848"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2571"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2682"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2818"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2842"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2879"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;LastRendererSize&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;LastRendererSize&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1730"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImRect&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImRect&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="522"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiPtrOrIndex&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiPtrOrIndex&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1214"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiPtrOrIndex&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiPtrOrIndex&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1215"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiDockNode&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiDockNode&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1652"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiContext&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiContext&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2169"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="641"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="645"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="697"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="698"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="699"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="700"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="701"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="702"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="703"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="554"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="555"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="590"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2525"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2526"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2528"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2895"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2896"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2924"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2979"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2980"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2981"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2982"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="2983"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3082"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3150"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3191"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3222"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3355"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;parent&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;parent&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="3147"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;sz+31&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;sz+31&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="590" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="590" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;a-1&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;a-1&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Safe checks: Assuming argument has value -2147483648"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;n+1&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;n+1&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="718" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="718" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1400" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1400" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1400" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="1400" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="564"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &amp;#039;Offsets[2147483648]&amp;#039; accessed at index -2147483648, which is out of bounds." verbose="Array &amp;#039;Offsets[2147483648]&amp;#039; accessed at index -2147483648, which is out of bounds." cwe="786" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Negative array index"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Safe checks: Assuming argument has value -2147483648"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &amp;#039;Sizes[2147483648]&amp;#039; accessed at index -2147483648, which is out of bounds." verbose="Array &amp;#039;Sizes[2147483648]&amp;#039; accessed at index -2147483648, which is out of bounds." cwe="786" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Negative array index"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_internal.h" line="639" info="Safe checks: Assuming argument has value -2147483648"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &amp;#039;if (nodeOperation!=NO_MovingNodes) nodeOperation=NO_MovingNodes&amp;#039; is logically equivalent to &amp;#039;nodeOperation=NO_MovingNodes&amp;#039;." verbose="The statement &amp;#039;if (nodeOperation!=NO_MovingNodes) nodeOperation=NO_MovingNodes&amp;#039; is logically equivalent to &amp;#039;nodeOperation=NO_MovingNodes&amp;#039;." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="621" info="Condition &amp;#039;nodeOperation!=NO_MovingNodes&amp;#039; is redundant"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="623" info="Assignment &amp;#039;nodeOperation=NO_MovingNodes&amp;#039;"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="87"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="291"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="789"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;InputsCount&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;InputsCount&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="556"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;OutputsCount&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;OutputsCount&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGuizmo/GraphEditor.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="557"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;EditOptions&amp;#039; is never used." verbose="The function &amp;#039;EditOptions&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="1044"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GraphEditorClear&amp;#039; is never used." verbose="The function &amp;#039;GraphEditorClear&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="112"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Show&amp;#039; is never used." verbose="The function &amp;#039;Show&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\GraphEditor.cpp" line="823"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImCurveEdit.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImCurveEdit.cpp" line="209"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImCurveEdit.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImCurveEdit.cpp" line="108"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;sel&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;sel&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImCurveEdit.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImCurveEdit.cpp" line="321"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;point&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;point&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImCurveEdit.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImCurveEdit.cpp" line="452"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGradient.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGradient.cpp" line="43"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGradient.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGradient.cpp" line="68"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Edit&amp;#039; is never used." verbose="The function &amp;#039;Edit&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGradient.cpp" line="65"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="143" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="148" info="Calling function &amp;#039;Dot&amp;#039;, 1st argument &amp;#039;a&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="162" info="Calling function &amp;#039;Normalize&amp;#039;, 1st argument &amp;#039;up&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Calling function &amp;#039;LookAt&amp;#039;, 3rd argument &amp;#039;&amp;amp;up.x&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="150" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="162" info="Calling function &amp;#039;Normalize&amp;#039;, 1st argument &amp;#039;up&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Calling function &amp;#039;LookAt&amp;#039;, 3rd argument &amp;#039;&amp;amp;up.x&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="151" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="162" info="Calling function &amp;#039;Normalize&amp;#039;, 1st argument &amp;#039;up&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Calling function &amp;#039;LookAt&amp;#039;, 3rd argument &amp;#039;&amp;amp;up.x&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="159" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Calling function &amp;#039;LookAt&amp;#039;, 1st argument &amp;#039;&amp;amp;eye.x&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; is accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="160" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Calling function &amp;#039;LookAt&amp;#039;, 1st argument &amp;#039;&amp;amp;eye.x&amp;#039; value is lifetime=x"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2784" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="265" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="265" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." cwe="758" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="266" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="266" info="Address of variable taken here."/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &amp;#039;alloca&amp;#039; called." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C++11 and later it is recommended to use std::array&amp;lt;&amp;gt; or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1263"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mDrawList&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mDrawList&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mMode&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mMode&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mViewMat&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mViewMat&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mProjectionMat&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mProjectionMat&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModel&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModel&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModelLocal&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModelLocal&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModelInverse&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModelInverse&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModelSource&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModelSource&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModelSourceInverse&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModelSourceInverse&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mMVP&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mMVP&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mMVPLocal&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mMVPLocal&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mViewProjection&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mViewProjection&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mModelScaleOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mModelScaleOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mCameraEye&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mCameraEye&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mCameraRight&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mCameraRight&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mCameraDir&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mCameraDir&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mCameraUp&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mCameraUp&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRayOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRayOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRayVector&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRayVector&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRadiusSquareCenter&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRadiusSquareCenter&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mScreenFactor&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mScreenFactor&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRelativeOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRelativeOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mbMouseOver&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mbMouseOver&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mReversed&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mReversed&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mTranslationPlan&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mTranslationPlan&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mTranslationPlanOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mTranslationPlanOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mMatrixOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mMatrixOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mTranslationLastDelta&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mTranslationLastDelta&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRotationVectorSource&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRotationVectorSource&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRotationAngle&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRotationAngle&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mRotationAngleOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mRotationAngleOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mScale&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mScale&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mScaleValueOrigin&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mScaleValueOrigin&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mScaleLast&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mScaleLast&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mSaveMousePosx&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mSaveMousePosx&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBelowAxisLimit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBelowAxisLimit&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBelowPlaneLimit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBelowPlaneLimit&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mAxisFactor&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mAxisFactor&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsPivot&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsPivot&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsAnchor&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsAnchor&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsPlan&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsPlan&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsLocalPivot&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsLocalPivot&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsBestAxis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsBestAxis&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsAxis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsAxis&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mBoundsMatrix&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mBoundsMatrix&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Context::mCurrentOperation&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Context::mCurrentOperation&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="669"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: gContext.mbUsing. &amp;#039;!gContext.mbUsing || (gContext.mbUsing &amp;amp;&amp;amp; type==MT_MOVE_X+i)&amp;#039; is equivalent to &amp;#039;!gContext.mbUsing || type==MT_MOVE_X+i&amp;#039;" verbose="The condition &amp;#039;!gContext.mbUsing || gContext.mbUsing &amp;amp;&amp;amp; type==MT_MOVE_X+i&amp;#039; is equivalent to &amp;#039;!gContext.mbUsing || type==MT_MOVE_X+i&amp;#039;." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1530"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: gContext.mbUsing. &amp;#039;!A || (A &amp;amp;&amp;amp; B)&amp;#039; is equivalent to &amp;#039;!A || B&amp;#039;" verbose="The condition &amp;#039;!gContext.mbUsing || gContext.mbUsing &amp;amp;&amp;amp; type==MT_MOVE_YZ+i&amp;#039; is equivalent to &amp;#039;!gContext.mbUsing || type==MT_MOVE_YZ+i&amp;#039;." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1559"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="362"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="367"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1029"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1030"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1033"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1042"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1044"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1263"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2145"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2288"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2399"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2406"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2407"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2412"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2427"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2446"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2492"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2518"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2579"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2587"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2595"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2603"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2637"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2672"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2673"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2692"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2695"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2770"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;io&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;io&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="811"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="922"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;allowFlip&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;allowFlip&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1161"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;indices&amp;#039; can be declared as const array" verbose="Variable &amp;#039;indices&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="1782"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;panelPos&amp;#039; can be declared as const array" verbose="Variable &amp;#039;panelPos&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2850"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: originalScaleDivider.w" verbose="Uninitialized variable: originalScaleDivider.w" cwe="457" file0="FlawedEngine/Libraries/include/ImGuizmo/ImGuizmo.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2299"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AllowAxisFlip&amp;#039; is never used." verbose="The function &amp;#039;AllowAxisFlip&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2479"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;BeginFrame&amp;#039; is never used." verbose="The function &amp;#039;BeginFrame&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="959"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DecomposeMatrixToComponents&amp;#039; is never used." verbose="The function &amp;#039;DecomposeMatrixToComponents&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2425"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DrawCubes&amp;#039; is never used." verbose="The function &amp;#039;DrawCubes&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2576"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsOver&amp;#039; is never used." verbose="The function &amp;#039;IsOver&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="995"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Manipulate&amp;#039; is never used." verbose="The function &amp;#039;Manipulate&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2484"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RecomposeMatrixFromComponents&amp;#039; is never used." verbose="The function &amp;#039;RecomposeMatrixFromComponents&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2444"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetDrawlist&amp;#039; is never used." verbose="The function &amp;#039;SetDrawlist&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="949"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetGizmoSizeClipSpace&amp;#039; is never used." verbose="The function &amp;#039;SetGizmoSizeClipSpace&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2532"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetID&amp;#039; is never used." verbose="The function &amp;#039;SetID&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="2474"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetImGuiContext&amp;#039; is never used." verbose="The function &amp;#039;SetImGuiContext&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="954"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetOrthographic&amp;#039; is never used." verbose="The function &amp;#039;SetOrthographic&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="944"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetRect&amp;#039; is never used." verbose="The function &amp;#039;SetRect&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="933"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Transpose&amp;#039; is never used." verbose="The function &amp;#039;Transpose&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImGuizmo.cpp" line="384"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;hasScrollBar&amp;#039; is always true" verbose="Condition &amp;#039;hasScrollBar&amp;#039; is always true" cwe="571" file0="FlawedEngine/Libraries/include/ImGuizmo/ImSequencer.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="163" info="Condition &amp;#039;hasScrollBar&amp;#039; is always true"/>
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="149" info="Assignment &amp;#039;hasScrollBar(true)&amp;#039;, assigned value is 1"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;rc&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;rc&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImSequencer.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="373"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;rc&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;rc&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImSequencer.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="381"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;customDraw&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;customDraw&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImSequencer.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="483"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;customDraw&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;customDraw&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGuizmo/ImSequencer.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="485"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Sequencer&amp;#039; is never used." verbose="The function &amp;#039;Sequencer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGuizmo\ImSequencer.cpp" line="58"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\func_common.inl" line="36"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;e&amp;#039; shadows outer function" verbose="Local variable &amp;#039;e&amp;#039; shadows outer function" cwe="398" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\gtc\constants.hpp" line="110" info="Shadowed declaration"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="34" info="Shadow variable"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;e&amp;#039; shadows outer function" verbose="Local variable &amp;#039;e&amp;#039; shadows outer function" cwe="398" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\gtc\constants.hpp" line="110" info="Shadowed declaration"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="122" info="Shadow variable"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="46"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="74"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="84"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="101"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="46" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="74" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="84" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="101" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;x1, y1, x2, y2&amp;#039; definition &amp;#039;x0, y0, x1, y1&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;x1, y1, x2, y2&amp;#039; definition &amp;#039;x0, y0, x1, y1&amp;#039;" cwe="683" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat2x2.inl" line="49" info=""/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat2x2.hpp" line="41" info=""/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="260"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="270"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="300"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="310"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="320"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="331"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x2.inl" line="340"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="262"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="272"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="282"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="292"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="329"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="347"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x3.inl" line="356"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="266"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="276"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="286"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="296"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="306"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="316"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="326"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="337"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="346"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v1, v2, v3&amp;#039; definition &amp;#039;v0, v1, v2&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v1, v2, v3&amp;#039; definition &amp;#039;v0, v1, v2&amp;#039;" cwe="683" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.inl" line="110" info=""/>
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat3x4.hpp" line="63" info=""/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="279"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="291"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="301"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="358"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x2.inl" line="368"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="279"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="291"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="301"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="358"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x3.inl" line="368"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="356"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="368"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="385"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="386"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="404"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="405"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="414"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="FlawedEngine/Core/Core.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\glm\detail\type_mat4x4.inl" line="415"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="62"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="63"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="139"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="176"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="184"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="192"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="195"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="210"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="212"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="978"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="979"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="980"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="981"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="982"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="983"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="984"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="985"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="986"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="987"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="988"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="989"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="990"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="991"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="992"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="993"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="994"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="995"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="996"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="997"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="998"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="999"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1000"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1001"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1002"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1003"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1004"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1005"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1006"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1007"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1008"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1009"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1010"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1011"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1012"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1013"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1014"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1015"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1016"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1017"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1018"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1019"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1020"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1021"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1022"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1023"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1024"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1025"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1029"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1030"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1031"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1032"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1033"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1034"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1035"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1036"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1037"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1038"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1039"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1040"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1041"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1045"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1046"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1047"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1048"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1052"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1053"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1054"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1055"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1056"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1057"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1058"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1059"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1060"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1064"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1065"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1066"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1067"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1068"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1069"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1070"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1071"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1072"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1076"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1077"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1078"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1079"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1080"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1081"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1082"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1083"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1084"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1085"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1086"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1087"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1088"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1089"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1090"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1091"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1092"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1093"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1094"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1098"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1099"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1100"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1101"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1102"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1103"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1104"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1105"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1106"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1107"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1108"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1110"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1111"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1113"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1114"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1115"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1116"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1117"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1118"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1119"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1120"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1121"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1122"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1123"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1124"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1126"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1128"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1129"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1130"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1131"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1132"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1133"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1134"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1135"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1136"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1137"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1138"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1139"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1140"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1141"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1142"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1143"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1145"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1146"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1147"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1148"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1149"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1150"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1151"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1152"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1153"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1154"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1156"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1157"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1158"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1159"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1160"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1161"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1162"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1163"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1164"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1165"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1167"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1168"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1169"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1170"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1171"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1172"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1173"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1174"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1175"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1176"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1177"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1178"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1179"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1180"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1181"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1182"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1183"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1184"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1185"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1186"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1187"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1188"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1189"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1190"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1194"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1195"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1196"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1197"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1198"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1199"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1203"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1204"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1205"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1206"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1207"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1208"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1209"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1210"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1211"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1212"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1213"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1215"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1216"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1218"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1219"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1220"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1221"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1222"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1223"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1224"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1225"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1226"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1227"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1228"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1229"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1230"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1231"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1232"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1233"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1234"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1235"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1236"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1237"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1238"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1239"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1240"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1241"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1242"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1243"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1244"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1245"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1246"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1247"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1248"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1249"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1250"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1251"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1252"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1253"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1254"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1255"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1256"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1257"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1258"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1259"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1260"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1261"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1262"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1263"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1264"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1265"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1266"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1267"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1268"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1269"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1270"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1271"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1272"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1273"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1274"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1275"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1276"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1277"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1278"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1279"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1280"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1281"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1282"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1283"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1284"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1285"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1286"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1290"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1291"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1292"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1293"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1294"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1295"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1296"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1297"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1298"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1299"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1300"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1301"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1302"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1303"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1304"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1308"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1309"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1310"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1311"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1312"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1313"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1314"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1315"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1316"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1317"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1318"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1319"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1320"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1321"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1322"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1323"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1324"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1325"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1326"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1330"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1331"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1332"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1333"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1334"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1335"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1336"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1337"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1338"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1339"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1340"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1341"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1342"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1343"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1344"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1345"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1346"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1347"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1348"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1349"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1350"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1351"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1352"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1353"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1354"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1355"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1356"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1357"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1358"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1359"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1360"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1361"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1362"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1363"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1364"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1365"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1366"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1367"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1368"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1369"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1370"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1371"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1372"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1373"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1374"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1375"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1376"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1377"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1378"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1379"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1380"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1381"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1382"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1383"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1384"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1385"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1386"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1387"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1391"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1392"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1393"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1395"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1396"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1397"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1398"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1399"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1400"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1401"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1402"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1403"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1404"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1405"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1406"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1407"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1408"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1409"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1410"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1411"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1412"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1413"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1414"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1415"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1416"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1417"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1418"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1419"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1420"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1421"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1422"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1423"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1424"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1425"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1426"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1427"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1428"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1429"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1430"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1431"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1432"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1433"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1434"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1435"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1436"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1440"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1441"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1442"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1443"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1444"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1445"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1446"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1447"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1448"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1449"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1450"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1451"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1452"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1453"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1454"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1455"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1456"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1457"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1458"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1459"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1460"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1461"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1462"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1463"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1464"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1465"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1466"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1467"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1468"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1469"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1470"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1471"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1472"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1473"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1474"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1475"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1476"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1477"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1478"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1479"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1480"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1481"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1482"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1483"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1484"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1485"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1486"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1487"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1488"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1489"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1490"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1491"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1492"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1493"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1494"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1495"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1496"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1497"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1498"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1499"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1500"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1501"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1502"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1503"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1504"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1505"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1506"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1507"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1508"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1509"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1510"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1511"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1512"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1513"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1514"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1515"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1516"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1517"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1518"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1519"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1520"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1521"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1522"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1523"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1524"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1525"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1526"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1527"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1528"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1532"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1533"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1534"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1535"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1536"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1537"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1538"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1539"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1540"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1541"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1542"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1543"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1547"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1548"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1549"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1550"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1551"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1552"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1553"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1554"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1555"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1556"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1557"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1558"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1559"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1560"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1561"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1562"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1563"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1564"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1565"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1566"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1567"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1568"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1569"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1570"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1571"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1572"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1573"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1574"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1575"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1576"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1577"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1578"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1579"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1580"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1581"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1582"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1583"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1584"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1585"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1586"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1587"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1588"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1589"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1590"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1594"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1595"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1596"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1597"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1598"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1599"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1600"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1601"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1602"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1606"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1607"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1608"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1609"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1610"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1611"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1612"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1613"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1614"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1615"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1616"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1617"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1618"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1619"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1620"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1621"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1622"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1623"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1624"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1625"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1626"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1627"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1628"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1629"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1630"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1631"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1632"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1633"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1634"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1635"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1636"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1637"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1638"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1639"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1640"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1641"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1642"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1643"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1644"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1645"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1646"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1647"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1648"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1649"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1650"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1651"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1652"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1653"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1654"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1655"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1656"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1657"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1658"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1659"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1660"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1661"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1662"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1663"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1664"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1665"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1666"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1667"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1668"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1669"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1670"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1671"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1672"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1673"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1674"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1675"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1676"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1677"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1678"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1679"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1680"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1681"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1682"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1683"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1684"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1685"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1686"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1687"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1688"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1689"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1690"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1691"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1692"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1693"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1694"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1695"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1696"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1697"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1698"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1699"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1700"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1701"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1702"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1703"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1704"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1705"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1706"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1707"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1708"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1709"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1710"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1711"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1712"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1713"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1714"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1715"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1716"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1717"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1718"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1719"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1720"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1721"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1722"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1723"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1724"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1725"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1726"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1727"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1731"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1732"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1733"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1734"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1759"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/glad.c" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\glad.c" line="1806"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="367"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="405"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1910"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1975"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;text_end-s&amp;gt;10000&amp;#039; is always false" verbose="Condition &amp;#039;text_end-s&amp;gt;10000&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3593" info="Condition &amp;#039;text_end-s&amp;gt;10000&amp;#039; is always false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3573" info="Assuming that condition &amp;#039;s&amp;lt;text_end&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2058"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2066"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2179"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2180"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2181"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2193"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2382"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2384"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2509"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2521"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2621"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3247"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3575"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3599"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;ch&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;ch&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1768"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;cfg&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;cfg&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2529"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;num_segments+1&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;num_segments+1&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1155" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1147" info="Assuming condition is false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1145" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;a_min_of_12*48&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;a_min_of_12*48&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1171" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1166" info="Assuming condition is false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1164" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;a_min_of_12*48/12&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;a_min_of_12*48/12&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1171" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1166" info="Assuming condition is false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1164" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;a_max_of_12*48&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;a_max_of_12*48&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1171" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1166" info="Assuming condition is false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1164" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="safeIntegerOverflow" severity="error" msg="Safe checks: Signed integer overflow for expression &amp;#039;a_max_of_12*48/12&amp;#039;." verbose="Safe checks: Signed integer overflow for expression &amp;#039;a_max_of_12*48/12&amp;#039;." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1171" info="Integer overflow"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1166" info="Assuming condition is false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1164" info="Safe checks: Assuming argument has value 2147483647"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="567" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="564" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="567" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="564" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;out_ptr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;out_ptr&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1139"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddCallback&amp;#039; is never used." verbose="The function &amp;#039;AddCallback&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="465"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddCustomRectFontGlyph&amp;#039; is never used." verbose="The function &amp;#039;AddCustomRectFontGlyph&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2210"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddFontFromFileTTF&amp;#039; is never used." verbose="The function &amp;#039;AddFontFromFileTTF&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2142"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddImageQuad&amp;#039; is never used." verbose="The function &amp;#039;AddImageQuad&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1624"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddImageRounded&amp;#039; is never used." verbose="The function &amp;#039;AddImageRounded&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1640"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddQuad&amp;#039; is never used." verbose="The function &amp;#039;AddQuad&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1434"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddQuadFilled&amp;#039; is never used." verbose="The function &amp;#039;AddQuadFilled&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1446"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddRanges&amp;#039; is never used." verbose="The function &amp;#039;AddRanges&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3090"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddRemapChar&amp;#039; is never used." verbose="The function &amp;#039;AddRemapChar&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3307"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;BuildRanges&amp;#039; is never used." verbose="The function &amp;#039;BuildRanges&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3097"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CloneOutput&amp;#039; is never used." verbose="The function &amp;#039;CloneOutput&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="432"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DeIndexAllBuffers&amp;#039; is never used." verbose="The function &amp;#039;DeIndexAllBuffers&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1817"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesChineseFull&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesChineseFull&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2843"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesChineseSimplifiedCommon&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesChineseSimplifiedCommon&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2873"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesCyrillic&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesCyrillic&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3031"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesGreek&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesGreek&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2819"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesJapanese&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesJapanese&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2941"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesKorean&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesKorean&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="2830"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesThai&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesThai&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3044"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetGlyphRangesVietnamese&amp;#039; is never used." verbose="The function &amp;#039;GetGlyphRangesVietnamese&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="3056"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PrimUnreserve&amp;#039; is never used." verbose="The function &amp;#039;PrimUnreserve&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="649"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PushClipRectFullScreen&amp;#039; is never used." verbose="The function &amp;#039;PushClipRectFullScreen&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="594"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ScaleClipRects&amp;#039; is never used." verbose="The function &amp;#039;ScaleClipRects&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_draw.cpp" line="1838"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_rectpack.h" line="530"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_rectpack.h" line="531"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_rectpack.h" line="541"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_rectpack.h" line="542"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1177"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1510"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1837"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1838"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2686"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2709"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2779"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2798"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2864"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4307"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4825"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4881"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4900"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4933"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4947"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4952"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4957"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4962"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4967"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4972"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1222"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1375"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;endPtsOfContours&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;endPtsOfContours&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1825"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2402"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2403"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2426"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2472"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2473"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2473"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;needle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;needle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="2541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="3409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="3430"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4511"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4901"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1291"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1292"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1293"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;p&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1294"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;font&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;font&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1299"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;wcount&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;wcount&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="3498"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;ypos&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;ypos&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="3867"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;ypos&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;ypos&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4371"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;q0&amp;#039; can be declared as const array" verbose="Parameter &amp;#039;q0&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4406"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;ray&amp;#039; can be declared as const array" verbose="Parameter &amp;#039;ray&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4406"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;q1&amp;#039; can be declared as const array" verbose="Parameter &amp;#039;q1&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4406"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;q2&amp;#039; can be declared as const array" verbose="Parameter &amp;#039;q2&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4406"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;orig&amp;#039; can be declared as const array" verbose="Parameter &amp;#039;orig&amp;#039; can be declared as const array" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4406"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;a&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;a&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4470"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;b&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;b&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4470"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;s1&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;s1&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4784"/>
        </error>
        <error id="uninitvar" severity="warning" msg="Uninitialized variables: ranges.h_oversample, ranges.v_oversample" verbose="Uninitialized variables: ranges.h_oversample, ranges.v_oversample" cwe="457" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4319" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="4355" info="Calling function &amp;#039;stbtt_PackFontRanges&amp;#039;, 4th argument &amp;#039;&amp;amp;range&amp;#039; value is &amp;lt;Uninit&amp;gt;"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui_draw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_truetype.h" line="1826"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="143"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!entered&amp;#039; is always true" verbose="Condition &amp;#039;!entered&amp;#039; is always true" cwe="571" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="431" info="Condition &amp;#039;!entered&amp;#039; is always true"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="426" info="Assuming that condition &amp;#039;entered&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="143"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="171"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="505"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="558"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="622"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="692"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="859"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="874"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="905"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="934"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="979"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1019"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1027"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1034"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1042"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1059"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1066"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1076"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1082"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1089"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1097"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1105"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1135"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1138"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_glfw.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="1175"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplGlfw_InitForOpenGL&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplGlfw_InitForOpenGL&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="571"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplGlfw_InitForOther&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplGlfw_InitForOther&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="581"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplGlfw_InitForVulkan&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplGlfw_InitForVulkan&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="576"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplGlfw_NewFrame&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplGlfw_NewFrame&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="796"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplGlfw_Shutdown&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplGlfw_Shutdown&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_glfw.cpp" line="586"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="210"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="265"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="277"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="335"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="437"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="438"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="439"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="534"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="535"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="539"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="540"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="550"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="570"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="573"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="644"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="677"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_impl_opengl3.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="696"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplOpenGL3_Init&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplOpenGL3_Init&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="249"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplOpenGL3_NewFrame&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplOpenGL3_NewFrame&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="360"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImGui_ImplOpenGL3_Shutdown&amp;#039; is never used." verbose="The function &amp;#039;ImGui_ImplOpenGL3_Shutdown&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_impl_opengl3.cpp" line="347"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3414"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3395"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3991"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3058"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3705"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;line&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;line&amp;#039; is assigned a value that is never used." cwe="563" file0="FlawedEngine/Libraries/include/ImGui/imgui_tables.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3414"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;TableFindByID&amp;#039; is never used." verbose="The function &amp;#039;TableFindByID&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="297"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;TableRemove&amp;#039; is never used." verbose="The function &amp;#039;TableRemove&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_tables.cpp" line="3481"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7314"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7330"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;render_selection&amp;#039; is always false" verbose="Condition &amp;#039;render_selection&amp;#039; is always false" cwe="570" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4147" info="Condition &amp;#039;render_selection&amp;#039; is always false"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4141" info="render_selection is assigned &amp;#039;state&amp;amp;&amp;amp;(state-&amp;gt;HasSelection()||select_all)&amp;amp;&amp;amp;(RENDER_SELECTION_WHEN_INACTIVE||render_cursor)&amp;#039; here."/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4147" info="Assuming that condition &amp;#039;render_cursor&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="204"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="225"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="240"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1097"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1541"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1542"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1816"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1881"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1895"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1942"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1944"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1946"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1948"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1950"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1952"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1954"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1956"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1967"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1968"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1971"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1972"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1975"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1976"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1979"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1980"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1983"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1984"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1987"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1988"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1991"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1992"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1995"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1996"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1999"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2000"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2003"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2004"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2040"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2042"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2044"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2046"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2066"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2067"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2068"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2069"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2070"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2071"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2072"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2073"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2074"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2075"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2095"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2096"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2097"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2098"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2099"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2100"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2101"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2102"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2103"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2104"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2304"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2305"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2306"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2307"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2308"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2309"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2310"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2311"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2312"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2313"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2430"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2885"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2886"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2887"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2888"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2890"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2891"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2893"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2894"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2896"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2897"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2899"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2900"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2902"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2903"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2905"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2906"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3019"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3466"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3484"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3506"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3527"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3915"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4413"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="5155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="5160"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6492"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6683"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6684"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6886"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6920"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7342"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7343"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7353"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7354"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7361"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &amp;#039;selected != was_selected&amp;#039; is always false because &amp;#039;selected&amp;#039; and &amp;#039;was_selected&amp;#039; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6088" info=""/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6043" info="&amp;#039;was_selected&amp;#039; is assigned value &amp;#039;selected&amp;#039; here."/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;/&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;format_sanitized&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;format_sanitized&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2027"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;toggled&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;toggled&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6047"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="809"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="848"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1605"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4927"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="5910"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6155"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6470"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7745"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7776"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7843"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="7879"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;g&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;g&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="8431"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;V&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;V&amp;#039; can be declared as pointer to const" cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="4919"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6765" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6761" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6765" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6761" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6795" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6795" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6796" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6796" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6797" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6797" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (-1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (-1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6798" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value -9.99999956202e+24"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+25) to integer conversion overflow." verbose="Undefined behaviour: float (1e+25) to integer conversion overflow." cwe="190" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6798" info="float to integer conversion"/>
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6793" info="Safe checks: Assuming argument has value 9.99999956202e+24"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;BeginComboPreview&amp;#039; is never used." verbose="The function &amp;#039;BeginComboPreview&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1752"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; double &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; double &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; float &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; float &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; signed char &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; signed char &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; signed int &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; signed int &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; signed long long &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; signed long long &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; signed short &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; signed short &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; unsigned char &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; unsigned char &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; unsigned int &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; unsigned int &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; unsigned long long &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; unsigned long long &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeClampT &amp;lt; unsigned short &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeClampT &amp;lt; unsigned short &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; double &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; double &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; float &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; float &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; signed char &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; signed char &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; signed int &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; signed int &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; signed long long &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; signed long long &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; signed short &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; signed short &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned char &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned char &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned int &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned int &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned long long &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned long long &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned short &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;DataTypeCompareT &amp;lt; unsigned short &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;EndComboPreview&amp;#039; is never used." verbose="The function &amp;#039;EndComboPreview&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="1779"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ImAtoi &amp;lt; int &amp;gt;&amp;#039; is never used." verbose="The function &amp;#039;ImAtoi &amp;lt; int &amp;gt;&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="3264"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ListBoxHeader&amp;#039; is never used." verbose="The function &amp;#039;ListBoxHeader&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imgui_widgets.cpp" line="6467"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1168"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1169"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1170"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1171"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1398"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev_x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev_x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="404"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="FlawedEngine/Libraries/include/ImGui/imgui_widgets.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Libraries\include\ImGui\imstb_textedit.h" line="1359"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;cMesh::mDepthMap&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;cMesh::mDepthMap&amp;#039; is not initialized in the constructor." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="8"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="185"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="188"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="191"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="194"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="197"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="201"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;Trans&amp;#039; can be declared as reference to const" verbose="Parameter &amp;#039;Trans&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="14"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;Mat&amp;#039; can be declared as reference to const" verbose="Parameter &amp;#039;Mat&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="14"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;name&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;name&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="27"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;Light&amp;#039; can be declared as reference to const" verbose="Variable &amp;#039;Light&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="44"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;Trans&amp;#039; can be declared as reference to const" verbose="Parameter &amp;#039;Trans&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="132"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;LightSpaceMatrix&amp;#039; can be declared as reference to const" verbose="Parameter &amp;#039;LightSpaceMatrix&amp;#039; can be declared as reference to const" cwe="398" file0="FlawedEngine/Core/AssimpLoader/Mesh.cpp" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="132"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ShadowDraw&amp;#039; is never used." verbose="The function &amp;#039;ShadowDraw&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\AssimpLoader\Mesh.cpp" line="132"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CreateWindow&amp;#039; is never used." verbose="The function &amp;#039;CreateWindow&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Window.cpp" line="43"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;Init&amp;#039; is never used." verbose="The function &amp;#039;Init&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Window.cpp" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PollEvents&amp;#039; is never used." verbose="The function &amp;#039;PollEvents&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Window.cpp" line="96"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ShouldClose&amp;#039; is never used." verbose="The function &amp;#039;ShouldClose&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Window.cpp" line="107"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GenDepthFrameBuffer&amp;#039; is never used." verbose="The function &amp;#039;GenDepthFrameBuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="22"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GenFramebuffer&amp;#039; is never used." verbose="The function &amp;#039;GenFramebuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="17"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GenIndexBuffer&amp;#039; is never used." verbose="The function &amp;#039;GenIndexBuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="53"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GenUniformBuffer&amp;#039; is never used." verbose="The function &amp;#039;GenUniformBuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="58"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GenVertexBuffer&amp;#039; is never used." verbose="The function &amp;#039;GenVertexBuffer&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="37"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;get&amp;#039; is never used." verbose="The function &amp;#039;get&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Renderer.cpp" line="68"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetDirectionalLightPos&amp;#039; is never used." verbose="The function &amp;#039;SetDirectionalLightPos&amp;#039; is never used." cwe="561" sinceDate="yyyy-MM-dd">
            <location file="FlawedEngine\Core\Core.cpp" line="7"/>
        </error>
    </errors>
</results>
